@using LibraryManagement.Models.Book
@model List<BookEntries>

@Html.AntiForgeryToken()

<div class="h-[calc(100vh-64px)] relative w-full bg-primary p-4 flex items-center md:h-[calc(100vh-72px)] md:p-0">
    <div id="overlay" class="hidden fixed top-0 left-0 right-0 bottom-0 h-full w-full bg-black opacity-50 z-10"></div>
    <div class="overflow-auto bg-neutral card glass h-[90%] mx-auto lg:w-4/5">
        <table class="table">
            <thead class="bg-accent">
                <tr>
                    <th class="text-neutral">#</th>
                    <th class="text-neutral">Book ISBN</th>
                    <th class="text-neutral">Book Title</th>
                    <th class="text-neutral">Book Author</th>
                    <th class="text-neutral">Book Publisher</th>
                    <th class="text-neutral">Book Genre</th>
                    <th class="text-neutral">Book Published Date</th>
                    <th class="text-neutral">Book Status</th>
                    <th class="text-neutral">Actions</th>
                </tr>
            </thead>
            <tbody class="text-base-100 text-nowrap">
                @for (int i = 0; i < Model.Count; i++)
                {
                    <tr class="hover:bg-neutral">
                        <th>@(i + 1)</th>
                        <td>@Model[i].BookISBN</td>
                        <td>@Model[i].BookTitle</td>
                        <td>@Model[i].BookAuthor</td>
                        <td>@Model[i].BookPublisher</td>
                        <td>@Model[i].BookGenre</td>
                        <td>@Model[i].BookPublishedDate.ToShortDateString()</td>
                        @{
                            string status = @Model[i].BookStatus ? "Available" : "Not available";
                            string colorClass = Model[i].BookStatus ? "text-green-500" : "text-red-600";
                            <td class="@colorClass">@status</td>
                        }
                        <td>
                            <button id="edit-btn" class="btn btn-sm btn-primary" data-id="@Model[i].Id">
                                <svg class="w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m14.304 4.844 2.852 2.852M7 7H4a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h11a1 1 0 0 0 1-1v-4.5m2.409-9.91a2.017 2.017 0 0 1 0 2.853l-6.844 6.844L8 14l.713-3.565 6.844-6.844a2.015 2.015 0 0 1 2.852 0Z" />
                                </svg>
                                Edit
                            </button>
                            <button class="btn btn-sm btn-error delete-btn" data-id="@Model[i].Id">
                                <svg class="w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 7h14m-9 3v8m4-8v8M10 3h4a1 1 0 0 1 1 1v3H9V4a1 1 0 0 1 1-1ZM6 7h12v13a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V7Z" />
                                </svg>
                                Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<div id="modal" class="hidden bg-base-100 dark:bg-gray-900 absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 h-[90%] max-w-lg w-full card overflow-auto z-20">
    <div class="p-4" id="modal-container">
        
    </div>
</div>

@section Scripts {
    <script defer>
        const modal = document.getElementById("modal");
        const overlay = document.getElementById("overlay");
        
        const editButton = document.querySelectorAll("#edit-btn");

        function toggleModalWithOverlay() {
            if (modal.classList.contains("hidden") && overlay.classList.contains("hidden")) {
                modal.classList.remove("hidden");
                overlay.classList.remove("hidden");

                var button = $(this);
                var id = button.data("id");

                $.ajax({
                    url: "/Book/GetBookById", // URL to the edit action
                    type: "POST", // Use POST method
                    data: { id: id }, // Send the ID as data
                    headers: {
                        "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val() // Anti-forgery token
                    },
                    success: function (response) {
                        $("#modal-container").html(response);
                        $("#update-form").data('validator', null)
                        $.validator.unobtrusive.parse("#update-form");  
                    },
                    error: function () {
                        alert("An error occurred while searching the item.");
                    }
                });
            }
            else {
                modal.classList.add("hidden");
                overlay.classList.add("hidden");
            }
        }

        editButton.forEach(element => {
            element.addEventListener("click", toggleModalWithOverlay);
        });

        overlay.addEventListener("click", toggleModalWithOverlay);

        $(document).ready(function () {
            $(".delete-btn").click(function() {
                var button = $(this);
                var id = button.data("id");

                if (confirm("Are you sure you want to delete this item?")) {
                    $.ajax({
                        url: "/Book/DeleteBook", // URL to the delete action
                        type: "POST", // Use POST method
                        data: { id: id }, // Send the ID as data
                        headers: {
                            "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val() // Anti-forgery token
                        },
                        success: function (response) {
                            if (response.success) {
                                location.reload();
                            } else {
                                alert("Failed to delete the item.");
                            }
                        },
                        error: function () {
                            alert("An error occurred while deleting the item.");
                        }
                    });
                }
            });

            $("#update-form").submit(function(event) {
                event.preventDefault();

                $.ajax({
                    url: "/Book/UpdateBook",
                    type: "POST",
                    contentType: "application/json",
                    headers: {
                        "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val() // Anti-forgery token
                    },
                    error: function() {
                        alert("There's something wrong with your request.");
                    }
                })
            })

            $(document).on("click", "#cancel-btn", toggleModalWithOverlay);
        });
    </script>
}
